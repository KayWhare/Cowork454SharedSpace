@*
    For more information on enabling MVC for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860
*@
<div id="Bookings" class="tabcontent">
    <div class="row">
        <div class="col s12">
            <h3>CoWork Bookings</h3>
            <p>....</p>
        </div>
    </div>
    <div class="row">
        <div class="col s12">
            <h4>Bookings</h4>
            <table class="striped" id="Bookings-table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Transaction Number</th>
                        <th>User</th>
                        <th>Products</th>
                        <th></th>
                        <th></th>

                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
    </div>

</div>


<script>

    const bookingsData = document.querySelector('#Bookings-table tbody');
    const userIdElem = document.querySelector('#UserId');
    const productIdElem = document.querySelector('#ProductID');
    const dateStartElem = document.querySelector('#DateStart');
    const dateEndElem = document.querySelector('#DateEnd');        
    const table = document.getElementById("Bookings-table");

        //document.getElementById("someFormId").elements;


    const onUpdate = evt => {
        evt.preventDefault();

        const updateBtn = evt.currentTarget;
        const Id = updateBtn.getAttribute('data-id');

        let rowchildren = document.getElementById(`rowid${Id}`).children;


        //Change this
        const model = {
            Id: parseInt(rowchildren[0].children[0].value),
            TransactionNumber: parseInt(rowchildren[1].children[0].value),
            //find the user id from user
            UserId: rowchildren[2].children[0].value,
            Date_End: rowchildren[3].children[0].value
        }


        apiPath = `api/Orders/${Id}`;
        apiMethod = 'put';

        fetch(apiPath, {
            body: JSON.stringify(model),
            method: apiMethod,
            headers: {
                'Content-Type': 'application/json'
            }
        }).then(() => {
            refreshList();
        }).catch(err => {
            alert('Submit Put Method failed');
        });

    }

        //delete function
        const onDelete = evt => {
            evt.preventDefault();

            const deleteBtn = evt.currentTarget;
            const Id = deleteBtn.getAttribute('data-id');

            fetch(`/api/Orders/${Id}`, { method: 'delete' })
                .then(() => {
                    refreshList();
                });
        }


        const refreshList = () => {
            bookingsData.innerHTML = '';

            fetch('api/Orders')
                .then(res => res.json())
                .then(orders => {
                    orders.forEach(order => {
                        const idCell = document.createElement('td');
                        const transactionNumCell = document.createElement('td');
                        const userCell = document.createElement('td');
                        const productsCell = document.createElement('td');
                        const action1Cell = document.createElement('td');
                        const action2Cell = document.createElement('td');

                        console.log(order);
                        idCell.innerText = order.id;
                        transactionNumCell.innerText = order.transactionNumber;
                        userCell.innerText = order.user.firstName + " " + order.user.lastName;


                        let productinner = "<ul>";
                        order.bookings.forEach(product => {
                            productinner += `<li>${product.product.name}</li>`
                        })
                        productinner += "</ul>";

                        productsCell.innerHTML = productinner;

                        const deleteBtn = document.createElement('button');
                        const selectBtn = document.createElement('button');

                        deleteBtn.innerText = 'Delete';
                        deleteBtn.setAttribute('data-id', `${order.id}`);
                        deleteBtn.className = 'waves-effect waves-light btn';
                        deleteBtn.addEventListener('click', onDelete);
                        selectBtn.innerText = 'Select';
                        selectBtn.setAttribute('data-id', `${order.id}`);
                        selectBtn.className = 'waves-effect waves-light btn';
                        selectBtn.addEventListener('click', onEdit);


                        action1Cell.appendChild(deleteBtn);
                        action2Cell.appendChild(selectBtn);

                        const row = document.createElement('tr');

                        row.appendChild(idCell);
                        row.appendChild(transactionNumCell);
                        row.appendChild(userCell);
                        row.appendChild(productsCell);
                        row.appendChild(action1Cell);
                        row.appendChild(action2Cell);
                        
                        row.setAttribute('id', `rowid${order.id}`);
                        bookingsData.appendChild(row);
                    });
                })
                .then(() => { })
    }

    const refreshBut = evt => {
        evt.preventDefault;
        refreshList()
    }



        const onEdit = evt => {

            evt.preventDefault();

            const selectBtn = evt.currentTarget;
            const Id = selectBtn.getAttribute('data-id');

            let rowchildren = document.getElementById(`rowid${Id}`).children;
            let temp;

            for (var i = 0; i < 4; i++) {
                temp = rowchildren[i].innerText;
                rowchildren[i].innerHTML = `<input type="text" value="${temp}" />`;
            };

            const EditBtn = document.createElement('button');
            const updateBtn = document.createElement('button');

            EditBtn.innerText = 'Cancel';
            EditBtn.className = 'waves-effect waves-light btn';
            EditBtn.addEventListener('click', refreshBut);
            updateBtn.innerText = 'Update';
            updateBtn.setAttribute('data-id', Id);
            updateBtn.className = 'waves-effect waves-light btn';
            updateBtn.addEventListener('click', onUpdate);

            rowchildren[4].innerHTML = '';
            rowchildren[4].appendChild(EditBtn);
            rowchildren[5].innerHTML = '';
            rowchildren[5].appendChild(updateBtn);


    }  

        refreshList();



</script>