
ï»¿@{
    ViewData["Title"] = "Admin";
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <title>Test Site</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Oxygen:wght@300;400;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Slab:wght@300&display=swap" rel="stylesheet">

    <script src="https://use.fontawesome.com/6b0d89f709.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            scroll-behavior: smooth;
            font-family: Roboto;
        }

        body {
            width: 100%;
        }

        header {
            display: flex;
            width: 100%;
            min-width: 100vw;
            flex-direction: row;
            justify-content: space-between;
            height: 20vh;
            max-height: 200px;
            padding: 10px 0 20px 10px;
            margin-bottom: 5px;
            box-shadow: 0 3px rgba(0,0,0,0.3);
        }

        .logo {
            /* width: 100%; */
            height: 100%;
            object-fit: contain;
        }

        .logout-btn {
            width: 150px;
            height: 50px;
            margin: auto 20px;
            color: #fff;
            background-color: rgb(43, 81, 112);
            border-radius: 20px;
        }

            .logout-btn:hover {
                background-image: linear-gradient(rgb(43, 81, 112), steelblue);
                transition: all 0.4s;
            }

        main {
            width: 100vw;
            height: 100vh;
            display: flex;
            flex-direction: row;
        }

        aside {
            width: 20%;
            min-width: 250px;
            height: 100vh;
            padding-left: 10px;
            border-right: 2px solid groove black;
            display: flex;
            flex-direction: column;
            align-content: center;
        }

            aside h2 {
                font-size: 1.5em;
                font-weight: bold;
            }

            aside p {
                text-decoration: underline;
                font-weight: bold;
            }

            aside > ul {
                list-style: none;
                font-size: 1.3em;
                padding-top: 10px;
            }

                aside > ul > li {
                    display: block;
                    padding: 5px 0;
                }

                    aside > ul > li > i {
                        padding-right: 5px;
                    }

                    aside > ul > li > a {
                        text-decoration: none;
                        color: rgb(43, 81, 112);
                    }

                        aside > ul > li > a:hover {
                            text-decoration: none;
                            color: steelblue;
                        }

                        aside > ul > li > a:active {
                            text-decoration: underline;
                        }

        .content {
            height: 100%;
            width: 100%;
            padding-left: 15px;
            text-align: center;
            background-image: url(/images/image_01.jpg);
            background-repeat: no-repeat;
            background-size: cover;
        }

            .content h2 {
                color: rgb(43, 81, 112);
            }

            .content p {
                font-size: 1.8em;
            }
    </style>
</head>
<body>

    <header>
        <img class="logo" src="/images/CoWork454 Logo esign.png" alt="Cowork454 logo">
        <button class="logout-btn">LOGOUT</button>
    </header>


    <main>
        <aside>
            <h2>CoWork 454 Interface</h2>
                <p>Select Options Below</p>
                <ul id="menu">
                    <li class="listItem" id="1"><i class="fa fa-caret-right"></i><a href="#0">User Management</a></li>
                    <li class="listItem" id="2"><i class="fa fa-caret-right"></i><a href="#1">Floor Space Management</a></li>
                    <li class="listItem" id="3"><i class="fa fa-caret-right"></i><a href="#2">Bookings Management</a></li>
                    <li class="listItem" id="4"><i class="fa fa-caret-right"></i><a href="#3">Blogs Managment</a></li>
                    <li class="listItem" id="5"><i class="fa fa-caret-right"></i><a href="#3">Exit Admin Interface</a></li>
                </ul>
        </aside>

        <div class="content">
            <h2>CoWork 454 Admin Interface</h2>
            <p>Manage all your Floor Spaces, Bookings and Users right here</p>
        </div>
    </main>

    <script>
        document.querySelectorAll('.listItem').forEach(item => {
            item.addEventListener('click', event => {
                var content = document.querySelector('.content');
                content.innerHTML = "";
                content.style.background = "#fff";

                console.log(item.id);
                if(item.id==1){
                    content.innerHTML = `@Html.Partial("_UsersForm.cshtml")`;
                    usersBtn();
                    console.log('hello');
                }
                if(item.id==2){
                    console.log('Space');
                    content.innerHTML = `@Html.Partial("_ProductsForm.cshtml")`;
                    spaceBtn();

                }
                if (item.id == 3) {
                    content.innerHTML = `@Html.Partial("_BookingsForm.cshtml")`;
                    bookingBtn();
                    console.log('Booking');
                }
                if (item.id == 4) {
                    content.innerHTML = `@Html.Partial("_BlogForms.cshtml")`;
                    blogsBtn();
                    console.log('Booking');
                }
                if(item.id==5){
                    console.log('exit');
                }
            },false)
        })



        //=====================================================
        //FLOOR SPACE SCRIPTS
        //=====================================================

        function spaceBtn() {

            const spacesData = document.querySelector('#spaces-table tbody');
            const idElem = document.querySelector('input[name="Id"]');
            const nameElem = document.querySelector('#Name');
            const detailsElem = document.querySelector('#Details');
            const imgPath = document.querySelector('#ImagePath');
            const isAvailable = document.querySelector('input[name="isAvailable"]');

            //document.getElementById("someFormId").elements;




            //document.getElementById("someFormId").elements;


            const onSave = evt => {
                evt.preventDefault();

                const Id = idElem.value;

                const model = {
                    Name: nameElem.value,
                    Details: detailsElem.value,
                    ImagePath: imgPath.value,
                    isAvailable: true
                }

                let apiPath = '/api/Products';
                let apiMethod = 'post';
                if (!!Id) {
                    model.id = parseInt(Id);
                    apiPath = `/api/Products/${Id}`;
                    apiMethod = 'put';
                }

                fetch(apiPath, {
                    body: JSON.stringify(model),
                    method: apiMethod,
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).then(res => {
                    refreshBut();
                    clearList();
                }).catch(err => {
                    alert('Submit failed');
                });
            };

            const onUpdate = evt => {

                evt.preventDefault();

                const updateBtn = evt.currentTarget;
                const Id = updateBtn.getAttribute('data-id');
                const Btn = document.getElementById(`Avalibility${Id}`);
                const isAv = Btn.classList.contains("Available")

                let rowchildren = document.getElementById(`rowid${Id}`).children;

                const model = {
                    Id: parseInt(Id),
                    Name: rowchildren[0].children[0].value,
                    Details: rowchildren[1].children[0].value,
                    ImagePath: rowchildren[2].children[0].value,
                    isAvailable: isAv
                }
                //build model

                apiPath = `/api/Products/${Id}`;
                apiMethod = 'put';

                fetch(apiPath, {
                    body: JSON.stringify(model),
                    method: apiMethod,
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).then(res => {
                    //maybe refreshBtn
                    refreshList();
                }).catch(err => {
                    alert('Submit Put Method failed');
                });

            }



        //delete function
            const onDelete = evt => {
                evt.preventDefault();

                const deleteBtn = evt.currentTarget;
                const Id = deleteBtn.getAttribute('data-id');

                fetch(`/api/Products/${Id}`, { method: 'delete' })
                    .then(() => {
                        refreshBut();
                    });
            }


            const refreshList = () => {
                spacesData.innerHTML = '';

                fetch('api/Products')
                    .then(res => res.json())
                    .then(products => {
                        products.forEach(product => {
                            const nameCell = document.createElement('td');
                            const detailsCell = document.createElement('td');
                            const imgCell = document.createElement('td');
                            const action3Cell = document.createElement('td');
                            const action1Cell = document.createElement('td');
                            const action2Cell = document.createElement('td');

                            nameCell.innerText = product.name;
                            detailsCell.innerText = product.details;
                            imgCell.innerText = product.imagePath;

                            const AvailBtn = document.createElement('button');
                            const deleteBtn = document.createElement('button');
                            const selectBtn = document.createElement('button');

                            if (product.isAvailable) {
                                AvailBtn.innerText = 'Available';
                                AvailBtn.className = 'waves-effect waves-light btn Available';
                             

                            } else {
                                AvailBtn.innerText = 'Unavailable';
                                AvailBtn.className = 'waves-effect waves-light btn Unavailable';
                            }
                            AvailBtn.setAttribute('data-id', product.id);
                            AvailBtn.setAttribute('id', `Avalibility${product.id}`);
                            AvailBtn.addEventListener('click', changeAvail);

                            deleteBtn.innerText = 'Delete';
                            deleteBtn.setAttribute('data-id', product.id);
                            deleteBtn.className = 'waves-effect waves-light btn';
                            deleteBtn.addEventListener('click', onDelete);
                            selectBtn.innerText = 'Select';
                            selectBtn.setAttribute('data-id', product.id);
                            selectBtn.className = 'waves-effect waves-light btn';
                            selectBtn.addEventListener('click', onEdit);


                            action3Cell.appendChild(AvailBtn);
                            action1Cell.appendChild(deleteBtn);
                            action2Cell.appendChild(selectBtn);

                            const row = document.createElement('tr');

                            row.appendChild(nameCell);
                            row.appendChild(detailsCell);
                            row.appendChild(imgCell);
                            row.appendChild(action3Cell);
                            row.appendChild(action1Cell);
                            row.appendChild(action2Cell);
                            row.setAttribute('id', `rowid${product.id}`);
                            spacesData.appendChild(row);
                        });
                    })
                    .then(() => { })
            }

            const refreshBut = evt => {
                evt.preventDefault;
                refreshList()
            }

            const changeAvail = evt => {
                evt.preventDefault();

                const Btn = evt.currentTarget;
                const Id = Btn.getAttribute('data-id');
                const isAv = Btn.classList.contains("Unavailable")
                if (isAv) {
                    Btn.innerText = "Available"
                } else {
                    Btn.innerText = "Unavailable"
                }
                Btn.classList.toggle("Available");
                Btn.classList.toggle("Unavailable");
                const path = `/api/Products/${Id}`

                fetch(path)
                    .then(res => res.json())
                    .then(product => {
                        product.isAvailable = isAv;
                        fetch(path, {
                            body: JSON.stringify(product),
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        })

                    })

            }

            const onEdit = evt => {
                evt.preventDefault();

                const selectBtn = evt.currentTarget;
                const Id = selectBtn.getAttribute('data-id');

                let rowchildren = document.getElementById(`rowid${Id}`).children;
                let temp;

                for (var i = 0; i < 3; i++) {
                    temp = rowchildren[i].innerText;
                    rowchildren[i].innerHTML = `<input type="text" value="${temp}" />`;
                };

                const EditBtn = document.createElement('button');
                const updateBtn = document.createElement('button');

                EditBtn.innerText = 'Cancel';
                EditBtn.className = 'waves-effect waves-light btn';
                EditBtn.addEventListener('click', refreshBut);
                updateBtn.innerText = 'Update';
                updateBtn.setAttribute('data-id', Id);
                updateBtn.className = 'waves-effect waves-light btn';
                updateBtn.addEventListener('click', onUpdate);

                rowchildren[4].innerHTML = '';
                rowchildren[4].appendChild(EditBtn);
                rowchildren[5].innerHTML = '';
                rowchildren[5].appendChild(updateBtn);


            }

            const saveButton = document.querySelector('button[type="submit"]');
            saveButton.addEventListener('click', onSave);

            refreshList();


        }



        //======================================================
        //BOOKINGS SCRIPTS
        //=====================================================

        function bookingBtn() {
            const bookingsData = document.querySelector('#Bookings-table tbody');

                //document.getElementById("someFormId").elements;


            const onUpdate = evt => {
                evt.preventDefault();

                const updateBtn = evt.currentTarget;
                const Id = updateBtn.getAttribute('data-id');

                let rowchildren = document.getElementById(`rowid${Id}`).children;


                //Change this
                const model = {
                    Id: parseInt(rowchildren[0].children[0].value),
                    TransactionNumber: parseInt(rowchildren[1].children[0].value),
                    //find the user id from user
                    UserId: rowchildren[2].children[0].value,
                    Date_End: rowchildren[3].children[0].value
                }


                apiPath = `api/Orders/${Id}`;
                apiMethod = 'put';

                fetch(apiPath, {
                    body: JSON.stringify(model),
                    method: apiMethod,
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).then(() => {
                    refreshList();
                }).catch(err => {
                    alert('Submit Put Method failed');
                });

            }

                //delete function
                const onDelete = evt => {
                    evt.preventDefault();

                    const deleteBtn = evt.currentTarget;
                    const Id = deleteBtn.getAttribute('data-id');

                    fetch(`/api/Orders/${Id}`, { method: 'delete' })
                        .then(() => {
                            refreshList();
                        });
                }


                const refreshList = () => {
                    bookingsData.innerHTML = '';

                    fetch('api/Orders')
                        .then(res => res.json())
                        .then(orders => {
                            orders.forEach(order => {

                                if (!order.bookings.length == 0) {

                                    const idCell = document.createElement('td');
                                    const transactionNumCell = document.createElement('td');
                                    const userCell = document.createElement('td');
                                    const productsCell = document.createElement('td');
                                    const action1Cell = document.createElement('td');
                                    const action2Cell = document.createElement('td');


                                    idCell.innerText = order.id;
                                    transactionNumCell.innerText = order.transactionNumber;
                                    userCell.innerText = order.user.firstName + " " + order.user.lastName;


                                    let productinner = "<ul>";
                                    order.bookings.forEach(product => {
                                        productinner += `<li>${product.product.name}</li>`
                                    })
                                    productinner += "</ul>";

                                    productsCell.innerHTML = productinner;

                                    const deleteBtn = document.createElement('button');
                                    const selectBtn = document.createElement('button');

                                    deleteBtn.innerText = 'Delete';
                                    deleteBtn.setAttribute('data-id', `${order.id}`);
                                    deleteBtn.className = 'waves-effect waves-light btn';
                                    deleteBtn.addEventListener('click', onDelete);
                                    selectBtn.innerText = 'Select';
                                    selectBtn.setAttribute('data-id', `${order.id}`);
                                    selectBtn.className = 'waves-effect waves-light btn';
                                    selectBtn.addEventListener('click', onEdit);


                                    action1Cell.appendChild(deleteBtn);
                                    action2Cell.appendChild(selectBtn);

                                    const row = document.createElement('tr');

                                    row.appendChild(idCell);
                                    row.appendChild(transactionNumCell);
                                    row.appendChild(userCell);
                                    row.appendChild(productsCell);
                                    row.appendChild(action1Cell);
                                    row.appendChild(action2Cell);

                                    row.setAttribute('id', `rowid${order.id}`);
                                    bookingsData.appendChild(row);
                                }
                            });
                        })
                        .then(() => { })
            }

            const refreshBut = evt => {
                evt.preventDefault;
                refreshList()
            }



                const onEdit = evt => {

                    evt.preventDefault();

                    const selectBtn = evt.currentTarget;
                    const Id = selectBtn.getAttribute('data-id');

                    let rowchildren = document.getElementById(`rowid${Id}`).children;
                    let temp;

                    for (var i = 0; i < 4; i++) {
                        temp = rowchildren[i].innerText;
                        rowchildren[i].innerHTML = `<input type="text" value="${temp}" />`;
                    };

                    const EditBtn = document.createElement('button');
                    const updateBtn = document.createElement('button');

                    EditBtn.innerText = 'Cancel';
                    EditBtn.className = 'waves-effect waves-light btn';
                    EditBtn.addEventListener('click', refreshBut);
                    updateBtn.innerText = 'Update';
                    updateBtn.setAttribute('data-id', Id);
                    updateBtn.className = 'waves-effect waves-light btn';
                    updateBtn.addEventListener('click', onUpdate);

                    rowchildren[4].innerHTML = '';
                    rowchildren[4].appendChild(EditBtn);
                    rowchildren[5].innerHTML = '';
                    rowchildren[5].appendChild(updateBtn);


            }

                refreshList();

        }


        //=============================
        //======================================================
        //USERS SCRIPTS
        //=====================================================

        function usersBtn() {
    const UserData = document.querySelector('#users-table tbody');

    const onUpdate = evt => {
        evt.preventDefault();

        const updateBtn = evt.currentTarget;
        const Id = updateBtn.getAttribute('data-id');

        let rowchildren = document.getElementById(`rowid${Id}`).children;


        //Change this
        const model = {
            Id: parseInt(Id),
            FirstName: rowchildren[0].children[0].value,
            LastName: rowchildren[1].children[0].value,
            Email: rowchildren[2].children[0].value,
            CompanyName: rowchildren[3].children[0].value,
            Phone: rowchildren[4].children[0].value,
            UserRole: parseInt(rowchildren[5].children[0].value),
        }


        apiPath = `api/Users/${Id}`;
        apiMethod = 'put';

        fetch(apiPath, {
            body: JSON.stringify(model),
            method: apiMethod,
            headers: {
                'Content-Type': 'application/json'
            }
        }).then(() => {
            refreshList();
        }).catch(err => {
            alert('Submit Put Method failed');
        });

    }



    //delete function
    const onDelete = evt => {
        evt.preventDefault();

        const deleteBtn = evt.currentTarget;
        const Id = deleteBtn.getAttribute('data-id');

        fetch(`/api/Users/${Id}`, { method: 'delete' })
            .then(() => {
                refreshList();
            });
    }


    const refreshList = () => {
        UserData.innerHTML = '';

        fetch('api/Users')
            .then(res => res.json())
            .then(users => {
                //console.log(users);
                users.forEach(user => {
                    const firstNameCell = document.createElement('td');
                    const lastNameCell = document.createElement('td');
                    const emailCell = document.createElement('td');
                    const phoneCell = document.createElement('td');
                    const companyCell = document.createElement('td');
                    const userRoleCell = document.createElement('td');

                    const action1Cell = document.createElement('td');
                    const action2Cell = document.createElement('td');
                    //const action3Cell = document.createElement('td');

                    firstNameCell.innerText = user.firstName;
                    lastNameCell.innerText = user.lastName;
                    emailCell.innerText = user.email;
                    phoneCell.innerText = user.phone;
                    companyCell.innerText = user.companyName;
                    userRoleCell.innerText = user.userRole;

                    const deleteBtn = document.createElement('button');
                    const selectBtn = document.createElement('button');
                    //const isAvail = document.createElement('checkbox');

                    deleteBtn.innerText = 'Delete';
                    deleteBtn.setAttribute('data-id', user.id);
                    deleteBtn.className = 'waves-effect waves-light btn';
                    deleteBtn.addEventListener('click', onDelete);
                    selectBtn.innerText = 'Select';
                    selectBtn.setAttribute('data-id', user.id);
                    selectBtn.className = 'waves-effect waves-light btn';
                    selectBtn.addEventListener('click', onEdit);


                    action1Cell.appendChild(deleteBtn);
                    action2Cell.appendChild(selectBtn);

                    const row = document.createElement('tr');

                    row.appendChild(firstNameCell);
                    row.appendChild(lastNameCell);
                    row.appendChild(emailCell);
                    row.appendChild(companyCell);
                    row.appendChild(phoneCell);
                    row.appendChild(userRoleCell);
                    row.appendChild(action1Cell);
                    row.appendChild(action2Cell);
                    row.setAttribute('id', `rowid${user.id}`);
                    UserData.appendChild(row);
                });
            })
            .then(() => { })
    }

    const refreshBut = evt => {
        evt.preventDefault;
        refreshList()
    }


    const onEdit = evt => {
        evt.preventDefault();

        const selectBtn = evt.currentTarget;
        const Id = selectBtn.getAttribute('data-id');

        let rowchildren = document.getElementById(`rowid${Id}`).children;
        let temp;

        for (var i = 0; i < 6; i++) {
            temp = rowchildren[i].innerText;
            rowchildren[i].innerHTML = `<input type="text" value="${temp}" />`;
        };

        const EditBtn = document.createElement('button');
        const updateBtn = document.createElement('button');

        EditBtn.innerText = 'Cancel';
        EditBtn.className = 'waves-effect waves-light btn';
        EditBtn.addEventListener('click', refreshBut);
        updateBtn.innerText = 'Update';
        updateBtn.setAttribute('data-id', Id);
        updateBtn.className = 'waves-effect waves-light btn';
        updateBtn.addEventListener('click', onUpdate);

        rowchildren[6].innerHTML = '';
        rowchildren[6].appendChild(EditBtn);
        rowchildren[7].innerHTML = '';
        rowchildren[7].appendChild(updateBtn);


    }


    refreshList();

    }

        //=====================================================
        //Blogs SCRIPTS
        //=====================================================
    function blogsBtn() {



        const spacesData = document.querySelector('#blogs-table tbody');
        const idElem = document.querySelector('input[name="Id"]');
        const titleElem = document.querySelector('#Title');
        const blurbElem = document.querySelector('#Blurb');
        const articleElem = document.querySelector('#Article');
        const imgPath = document.querySelector('#ImagePath');
        const userIdElem = document.querySelector('#UserId');
        const isFeatured = document.querySelector('input[name="isFeatured"]');
        const table = document.getElementById("blogs-table");

        //document.getElementById("someFormId").elements;


        const onSave = evt => {
            evt.preventDefault();

            const Id = idElem.value;

            const model = {
                Title: titleElem.value,
                Blurb: blurbElem.value,
                Article: articleElem.value,
                ImagePath: imgPath.value,
                UserId:pareseInt( userIdElem.value),
                isFeatured: false
            }
            const data = new FormData();
            data.append('Title', titleElem.value);
            data.append('Blurb', blurbElem.value);
            data.append('Article', articleElem.value);
            data.append('ImagePath', imgPath.value);
            data.append('UserId', pareseInt(userIdElem.value));
            data.append('isFeatured', false);


            apiPath = `/api/BlogPosts/`;
            apiMethod = 'POST';

            fetch(apiPath, {
                body: data,
                method: apiMethod,
                headers: {
                    'Content-Type': 'application/json'
                }
            }).then(() => {
                refreshBut();
            }).catch(err => {
                alert('Submit failed');
            });
        };

        const onUpdate = evt => {
            evt.preventDefault();

            const updateBtn = evt.currentTarget;
            const Id = updateBtn.getAttribute('data-id');

            let rowchildren = document.getElementById(`rowid${Id}`).children;
            

            const data = new FormData();
            data.append('Id', parseInt(Id));
            data.append('Title', rowchildren[0].children[0].value);
            data.append('Blurb', rowchildren[1].children[0].value);
            data.append('Article', rowchildren[2].children[0].value);
            data.append('File', rowchildren[3].children[1].value);
            data.append('ImagePath', rowchildren[3].children[0].src);
            data.append('UserId', parseInt(rowchildren[4].children[0].value));
            data.append('isFeatured', false);
            //build model

            apiPath = `/api/BlogPosts/${Id}`;
            apiMethod = 'put';

            fetch(apiPath, {
                body: data,
                method: apiMethod,
                headers: {
                    'Content-Type': 'application/json'
                }
            }).then(() => {
                //maybe refreshBtn
                refreshList();
            }).catch(err => {
                alert('Submit Put Method failed');
            });

        }



        //delete function
        const onDelete = evt => {
            evt.preventDefault();

            const deleteBtn = evt.currentTarget;
            const Id = deleteBtn.getAttribute('data-id');

            fetch(`/api/BlogPosts/${Id}`, { method: 'delete' })
                .then(() => {
                    refreshList();
                });
        }


        const refreshList = () => {
            spacesData.innerHTML = '';

            fetch('api/BlogPosts')
                .then(res => res.json())
                .then(blogs => {
                    blogs.forEach(post => {
                        const titleCell = document.createElement('td');
                        const blurbCell = document.createElement('td');
                        const articleCell = document.createElement('td');
                        const imgCell = document.createElement('td');
                        const userIDCell = document.createElement('td');
                        const action1Cell = document.createElement('td');
                        const action2Cell = document.createElement('td');

                        titleCell.innerText = post.title;
                        blurbCell.innerText = post.blurb;
                        articleCell.innerText = post.article;
                        imgCell.innerHTML = `<img src="${post.imageUrl}" />`;
                        userIDCell.innerText = post.userId;

                        const deleteBtn = document.createElement('button');
                        const selectBtn = document.createElement('button');

                        deleteBtn.innerText = 'Delete';
                        deleteBtn.setAttribute('data-id', post.id);
                        deleteBtn.className = 'waves-effect waves-light btn';
                        deleteBtn.addEventListener('click', onDelete);
                        selectBtn.innerText = 'Select';
                        selectBtn.setAttribute('data-id', post.id);
                        selectBtn.className = 'waves-effect waves-light btn';
                        selectBtn.addEventListener('click', onEdit);


                        action1Cell.appendChild(deleteBtn);
                        action2Cell.appendChild(selectBtn);

                        const row = document.createElement('tr');

                        row.appendChild(titleCell);
                        row.appendChild(blurbCell);
                        row.appendChild(articleCell);
                        row.appendChild(imgCell);
                        row.appendChild(userIDCell);
                        row.appendChild(action1Cell);
                        row.appendChild(action2Cell);
                        row.setAttribute('id', `rowid${post.id}`);
                        spacesData.appendChild(row);
                    });
                })
                .then(() => { })
        }

        const refreshBut = evt => {
            evt.preventDefault;
            refreshList()
        }


        const onEdit = evt => {
            evt.preventDefault();

            const selectBtn = evt.currentTarget;
            const Id = selectBtn.getAttribute('data-id');

            let rowchildren = document.getElementById(`rowid${Id}`).children;
            let temp;

            for (var i = 0; i < 3; i++) {
                temp = rowchildren[i].innerText;
                rowchildren[i].innerHTML = `<input type="text" value="${temp}" />`;
            };
            rowchildren[3].innerHTML += `<input name="ImagePath" type="file" placeholder="Upload Media" id="ImagePath" required>`;

            rowchildren[4].innerHTML = `<input type="text" value="${rowchildren[4].innerText}" />`;
            const EditBtn = document.createElement('button');
            const updateBtn = document.createElement('button');

            EditBtn.innerText = 'Cancel';
            EditBtn.className = 'waves-effect waves-light btn';
            EditBtn.addEventListener('click', refreshBut);
            updateBtn.innerText = 'Update';
            updateBtn.setAttribute('data-id', Id);
            updateBtn.className = 'waves-effect waves-light btn';
            updateBtn.addEventListener('click', onUpdate);

            rowchildren[5].innerHTML = '';
            rowchildren[5].appendChild(EditBtn);
            rowchildren[6].innerHTML = '';
            rowchildren[6].appendChild(updateBtn);


        }

        const saveButton = document.querySelector('button[type="submit"]');
        saveButton.addEventListener('click', onSave);

        refreshList();
    }


    </script>
</body>
</html>